#!/usr/bin/env python

import sys, os, argparse, subprocess, shutil, multiprocessing
from pispino.seqtools import *
from pispino.runcmd import *
from pispino.logger import *

__version__    = 2.8

__author__     = "Hyun Soon Gweon"
__copyright__  = "Copyright 2015, The PIPITS Project"
__credits__    = ["Hyun Soon Gweon", "Anna Oliver", "Joanne Taylor", "Tim Booth", "Melanie Gibbs", "Daniel S. Read", "Robert I. Griffiths", "Karsten Schonrogge"]
__license__    = "GPL"
__maintainer__ = "Hyun Soon Gweon"
__email__      = "h.s.gweon@reading.ac.uk"

ITSx = "ITSx"
VSEARCH = "vsearch"

if __name__ == '__main__':

    parser = argparse.ArgumentParser("PIPITS_FUNITS: Extract ITS1 or ITS2")
    parser.add_argument(
        "-i",
        action = "store",
        dest = "input",
        metavar = "<FILE>",
        help = "[REQUIRED] Joined, quality filtered sequences in FASTA. Typically output from pipits_prep",
        required = True)
    parser.add_argument(
        "-o",
        action = "store",
        dest = "outDir",
        metavar = "<DIR>",
        help = "[REQUIRED] Directory to output results",
        default = "pipits_funits",
        required = False)
    parser.add_argument(
        "-x",
        action = "store",
        dest = "ITSx_subregion",
        help = "[REQUIRED] Subregion of ITS to be extracted. Must choose either \"ITS1\" or \"ITS2\" E.g. -x ITS2",
        required = True,
        choices = ["ITS1", "ITS2"])

    # Generic
    parser.add_argument(
        "-r",
        action = "store_true",
        dest = "retain",
        help = "Retain intermediate files (Beware intermediate files use excessive disk space!)",
        required = False)
    parser.add_argument(
        "-v",
        action = "store_true",
        dest = "verbose",
        help = "Verbose mode",
        required = False)
    parser.add_argument(
        "-t",
        action = "store",
        dest = "threads",
        metavar = "<INT>",
        help = "Number of Threads [default: 1]",
        default = "1",
        required = False)

    options = parser.parse_args()


    ######################
    # Create directories #
    ######################

    EXE_DIR = os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(options.outDir):
        os.mkdir(options.outDir)
    else:
        shutil.rmtree(options.outDir)
        os.mkdir(options.outDir)
    tmpDir = options.outDir + "/intermediate"
    if not os.path.exists(tmpDir):
        os.mkdir(tmpDir)


    ###############################
    # Log files & version logging #
    ###############################

    logging_file = open(options.outDir + "/output.log", "w")
    summary_file = open(options.outDir + "/summary.log", "w")
    version_file = open(options.outDir + "/versions.log", "w")


    ##########
    # Start! #
    ##########

    logger("pipits_funits " + str(__version__) + ", the PIPITS Project", logging_file, display = True, timestamp = False)
    logger("https://github.com/hsgweon/pipits", logging_file, display = True, timestamp = False)
    logger("---------------------------------", logging_file, display = True, timestamp = False)
    logger("", logging_file, display = True, timestamp = False)

    # Log versions
    cmd = " ".join(["conda list"])
    run_cmd(cmd, version_file, False)

    # Start
    logger("pipits_funits started", logging_file, display = True)

    # Threads threshold
    if int(options.threads) > 999:
        logger(RED + "ERROR: Threads not allowed to exceed 999." + ENDC, logging_file, display = True)
        exit(1)
    elif int(options.threads) > multiprocessing.cpu_count():
        logger(RED + "ERROR: The number of available CPUs in your system is: " + str(multiprocessing.cpu_count()) + ". Please use more appropriate value for -t" + ENDC, logging_file, display = True)


    # Check integrity of the input file
    logger(ENDC + "Checking input FASTA for illegal characters" + ENDC, logging_file, display = True)
    with open(options.input) as f:
        for l in f:
            if l.startswith(">"):
                if l.find(" ") != -1:
                    logger_error("Error: \"  \" found in the headers. Please remove \" \" from headers in your FASTA file before proceeding to the next stage.")
                    exit(1)
    logger(BLUE + "... done" + ENDC, logging_file, display = True)


    ###########
    # Summary #
    ###########

    output_previous = options.input
    logger(ENDC + "Counting input sequences" + ENDC, logging_file, display = True)
    numberofsequences = int(getFileLineCount(output_previous) / 2)
    if numberofsequences == 0: 
        logger(RED + "ERROR: You have 0 sequences!" + ENDC, logging_file, display = True)
        exit(1)
    else:
        logger(BLUE + "... number of input sequences: " + str(numberofsequences) + ENDC, logging_file, display = True)
        summary_file.write("Number of input sequences: " + str(numberofsequences) + "\n")


    ###############
    # Dereplicate #
    ###############

    logger(ENDC + "Dereplicating sequences for efficiency" + ENDC, logging_file, display = True)
    cmd = " ".join([
        VSEARCH, 
        "--derep_fulllength", 
        options.input,
        "--output", tmpDir + "/derep.fasta",
        "--uc", tmpDir + "/derep.uc",
        "--fasta_width", "0",
        "--sizeout"
        ])
    run_cmd(cmd, logging_file, options.verbose)
    logger(BLUE + "... done" + ENDC, logging_file, display = True)


    ###########
    # Summary #
    ###########

    logger(ENDC + "Counting dereplicated sequences" + ENDC, logging_file, display = True)
    output_previous = tmpDir + "/derep.fasta"
    numberofsequences = int(getFileLineCount(output_previous) / 2)
    if numberofsequences == 0: 
        logger(RED + "ERROR: You have 0 sequences!" + ENDC, logging_file, display = True)
        exit(1)
    else:
        logger(BLUE + "... number of dereplicated sequences: " + str(numberofsequences) + ENDC, logging_file, display = True)
        summary_file.write("Number of dereplicated sequences: " + str(numberofsequences) + "\n")


    ###############################
    # Divide sequences into parts #
    ###############################

    if int(options.threads) > 1:

        logger(ENDC + "Splitting sequences to multiple parts" + ENDC, logging_file, display = True)
        cmd = " ".join([
            "seqkit split",
             tmpDir + "/derep.fasta",
             "-p", options.threads,
             "-f", 
             "--out-dir", tmpDir + "/split"
             ])
        run_cmd(cmd, logging_file, options.verbose)
        logger(BLUE + "... done" + ENDC, logging_file, display = True)


        cmds = []
        
        for i in range(1, int(options.threads)+1):
            # print(tmpDir + "/split/derep.part_" + "%03d" % i + ".fasta")
            cmd = " ".join([
                ITSx, 
                "-i", tmpDir + "/split/derep.part_" + "%03d" % i + ".fasta", 
                "-o", tmpDir + "/split/derep.part_" + "%03d" % i,
                "--preserve", "T", 
                "-t", "F", 
                "--cpu 1", 
                "--save_regions", options.ITSx_subregion
                ])
            cmds.append(cmd)

        import fileinput
        import glob
        from subprocess import Popen
        from itertools import islice

        maxThreads = int(options.threads)
        processes = (Popen(cmd, shell=True) for cmd in cmds)
        running_processes = list(islice(processes, maxThreads))  # start new processes
        while running_processes:
            for i, process in enumerate(running_processes):
                if process.poll() is not None:  # the process has finished
                    running_processes[i] = next(processes, None)  # start new process
                    if running_processes[i] is None: # no new processes
                        del running_processes[i]
                        break

        # Concatenate all
        with open(tmpDir + "/derep." + options.ITSx_subregion + ".fasta", 'wb') as outfile:
            for inputfilepath in glob.glob(tmpDir + "/split/derep.part_???.ITS?.fasta"):
                with open(inputfilepath, 'rb') as infile:
                    shutil.copyfileobj(infile, outfile)

    else:

        ################################################################
        # Run ITSx. Chop reads into regions. Re-orientate where needed #
        ################################################################

        logger(ENDC + "Extracting " + options.ITSx_subregion + " from sequences [ITSx]" + ENDC, logging_file, display = True)
        cmd = " ".join([
            ITSx, 
            "-i", tmpDir + "/derep.fasta", 
            "-o", tmpDir + "/derep", 
            "--preserve", "T", 
            "-t", "F", 
            "--cpu 1", 
            "--save_regions", options.ITSx_subregion])
        run_cmd(cmd, logging_file, options.verbose)
        logger(BLUE + "... done" + ENDC, logging_file, display = True)


    ###########
    # Summary #
    ###########

    logger(ENDC + "Counting ITS sequences (dereplicated)" + ENDC, logging_file, display = True)
    output_previous = tmpDir + "/derep." + options.ITSx_subregion + ".fasta"
    numberofsequences = int(getFileLineCount(output_previous) / 2)
    if numberofsequences == 0: 
        logger(RED + "ERROR: You have 0 sequences identified as " + options.ITSx_subregion + ". Are you sure your sequences are " + options.ITSx_subregion + "?" + ENDC, logging_file, display = True)
        exit(1)
    else:
        logger(BLUE + "... number of ITS sequences (dereplicated): " + str(numberofsequences) + ENDC, logging_file, display = True)
        summary_file.write("Number of ITS sequences (dereplicated): " + str(numberofsequences) + "\n")


    ##############
    # Sort by ID #
    ##############

    logger(ENDC + "Sorting by ID" + ENDC, logging_file, display = True)
    cmd = " ".join([
        "seqkit sort", tmpDir + "/derep." + options.ITSx_subregion + ".fasta",
         "-o",         tmpDir + "/derep." + options.ITSx_subregion + ".sorted.fasta"
         ])
    run_cmd(cmd, logging_file, options.verbose)
    logger(BLUE + "... done" + ENDC, logging_file, display = True)


    #########################################
    # Removing short sequences below 100bp) #
    #########################################

    logger(ENDC + "Removing short sequences below < 100bp" + ENDC, logging_file, display = True)
    cmd = " ".join([
        VSEARCH, 
        "--fastx_filter", tmpDir + "/derep." + options.ITSx_subregion + ".sorted.fasta",
        "--fastaout",     tmpDir + "/derep." + options.ITSx_subregion + ".sizefiltered.fasta",
        "--fastq_minlen 100",
        "--fasta_width 0"
        ])
    run_cmd(cmd, logging_file, options.verbose)
    logger(BLUE + "... done" + ENDC, logging_file, display = True)

    
    ###########
    # Summary #
    ###########

    output_previous = tmpDir + "/derep." + options.ITSx_subregion + ".sizefiltered.fasta"
    logger(ENDC + "Counting length-filtered sequences (dereplicated)" + ENDC, logging_file, display = True)
    numberofsequences = int(getFileLineCount(output_previous) / 2)
    if numberofsequences == 0:
        logger(RED + "ERROR: You have 0 sequences! Something isn't right." + ENDC, logging_file, display = True)
        exit(1)
    else:
        logger(BLUE + "... number of length-filtered sequences (dereplicated): " + str(numberofsequences) + ENDC, logging_file, display = True)        
        summary_file.write("Number of length-filtered sequences (dereplicated): " + str(numberofsequences) + "\n")


    ##############
    # Re-inflate #
    ##############

    logger(ENDC + "Re-inflating sequences" + ENDC, logging_file, display = True)
    cmd = " ".join(["python", EXE_DIR + "/pipits_rereplicate",
                    "-i", tmpDir + "/derep." + options.ITSx_subregion + ".sizefiltered.fasta", 
                    "-o", options.outDir + "/ITS.fasta", 
                    "--uc", tmpDir + "/derep.uc"])
    run_cmd(cmd, logging_file, options.verbose)
    logger(BLUE + "... done" + ENDC, logging_file, display = True)



    ###########
    # Summary #
    ###########

    output_previous = options.outDir + "/ITS.fasta"
    logger(ENDC + "Counting sequences after re-inflation" + ENDC, logging_file, display = True)
    numberofsequences = int(getFileLineCount(output_previous) / 2)
    if numberofsequences == 0: 
        logger(RED + "ERROR: You have 0 sequences! Something isn't right." + ENDC, logging_file, display = True)
        exit(1)
    else:
        logger(BLUE + "... number of sequences with ITS subregion: " + str(numberofsequences) + ENDC, logging_file, display = True)
        summary_file.write("Number of sequences with ITS subregion: " + str(numberofsequences) + "\n")


    ###############################
    # Finally move and delete tmp #
    ###############################

    if not options.retain:
        logger(ENDC + "Cleaning temporary directory", logging_file, display = True)
        shutil.rmtree(tmpDir)


    ########
    # Done #
    ########

    logger(ENDC + "Done" + ENDC + " - pipits_funits ended successfully. " + "(Your ITS sequences are \"" + options.outDir + "/ITS.fasta\"" + ")" + ENDC, logging_file, display = True)
    logger(ENDC + "Next step: pipits_process [ Example: pipits_process -i " + options.outDir + "/" + "ITS.fasta -o pipits_process ]" + ENDC, logging_file, display = True)

    logging_file.close()
    version_file.close()
    summary_file.close()

